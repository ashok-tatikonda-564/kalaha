buildscript {
    ext {
        springBootVersion = "3.1.5"
        springDependencyVersion = "1.1.3"
        dependencyCheckVerion = "0.49.0"
        vulnerabilityVersion = "8.4.0"
        spotlessVersion = "6.22.0"
        githookVersion = "1.2.1"
    }
}

plugins {
    id "java"
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "${springDependencyVersion}"

    //to keep dependencies up to date
    id "com.github.ben-manes.versions" version "${dependencyCheckVerion}"
    // to check vulnerabilities
    id "org.owasp.dependencycheck" version "${vulnerabilityVersion}"

    //coverage
    id "jacoco"
    //checkstyle
    id "com.diffplug.spotless" version "${spotlessVersion}"
    id "com.star-zero.gradle.githook" version "${githookVersion}"
}

group = "com.bol"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = "17"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

githook {
    failOnMissingHooksDir = false
    hooks {
        "pre-push" {
            task = "spotlessJavaCheck"
        }
    }
}

spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
    }
}
ext {
    springCloudVersion = "2021.0.8"
    springDocVersion = "2.2.0"
}


dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:mongodb:1.19.1"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test.finalizedBy("jacocoTestReport")
jacocoTestReport.finalizedBy("jacocoTestCoverageVerification")

bootRun {
    systemProperty("spring.profiles.active", "development")
}

springBoot {
    buildInfo {
        version = System.getenv("VERSION") ?: ""
        properties {
            additional = ['java-version'            : System.getProperty("java.version"),
                          'lib.version.spring-boot' : "${springBootVersion}",
                          'lib.version.spring-cloud': "${springCloudVersion}"]
        }
    }
}


def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    // reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
    // ignore gradle release candidates
    gradleReleaseChannel = "current"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "CLASS"
            excludes = ["com.bol.kalaha.KalahaApplication.class"]
            includes = ["com.bol.kalaha.*"]
        }
    }
}

task updateVersionsInReadmeBadges {
    def spring_boot_plugin_version = plugins.findPlugin("org.springframework.boot").SPRING_BOOT_VERSION
    replaceInReadMe('java-.*?-blue', "java-$sourceCompatibility-blue")
    replaceInReadMe('Spring%20Boot-.*?-blue', "Spring%20Boot-$spring_boot_plugin_version-blue")
    replaceInReadMe('Spring%20Cloud-.*?-blue', "Spring%20Cloud-$springCloudVersion-blue")
}

def replaceInReadMe(match, replace) {
    ant.replaceregexp(match: match, replace: replace, flags: 'g', byline: true) {
        fileset(dir: '.', includes: 'README.md')
    }
}
